@page "/profile"
@using WebApplication3.Client.ViewModels
@inject IProfileViewModel _profileViewModel
@using WebApplication3.Shared.Models
@inject AuthenticationStateProvider _authenticationStateProvider
@using System.Security.Claims
@using BlazorInputFile
@using Microsoft.AspNetCore.Components.Web
@using System.IO

<div class="col-12">
    <div class="col-4">
        <img src="@_profileViewModel.ProfilePic" style="width: 250px; height: 250px;"> <br /> <br />
        <InputFile OnChange="@OnInputFileChanged"></InputFile>
    </div>
    <div class="col-8">
        <input type="text" @bind-value="_profileViewModel.FirstName" class="form-control" placeholder="first name">
        <br />
        <input type="text" @bind-value="_profileViewModel.LastName" class="form-control" placeholder="last name">
        <br />
        <input type="text" @bind-value="_profileViewModel.EmailAddress" class="form-control" placeholder="email address">
        <br />
        <RadzenButton style="width: 160px" Icon="save" BusyText="Saving ..." IsBusy=@_profileViewModel.busy Click=@_profileViewModel.UpdateProfile Text="Save Profile Changes" />
        <span>&nbsp;&nbsp;</span>@_profileViewModel.Message
    </div>
</div>
@code {

    public string ProfilePicDataUrl { get; set; }

    private async Task OnInputFileChanged(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        var img = await file.ToImageFileAsync("image/jpeg", 250,250);
        MemoryStream memory = await img.ReadAllAsync();
        _profileViewModel.ProfilePic = ToDataUrl(memory,"image/jpeg");
    }



    public string ToDataUrl(MemoryStream data, string format)
    {
        var span = new Span<byte>(data.GetBuffer()).Slice(0, (int)data.Length);
        return $"data:{format};base64,{Convert.ToBase64String(span)}";
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var claim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
            _profileViewModel.UserId = Convert.ToInt32(claim.Value);
            await _profileViewModel.GetProfile();
        }
        else
        {

        }
    }
}
